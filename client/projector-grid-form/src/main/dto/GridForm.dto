/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
package "projector-grid-form":org.teamapps.projector.component.gridform;

import org.teamapps.projector.component.DtoComponent;
import org.teamapps.projector.template.DtoTemplate;
import org.teamapps.projector.format.DtoBorder;
import org.teamapps.projector.format.DtoBoxShadow;
import org.teamapps.projector.format.DtoSpacing;
import org.teamapps.projector.format.AlignItems;
import org.teamapps.projector.format.JustifyContent;

class DtoGridForm extends DtoComponent {
	required List<DtoComponent*> fields;
	required List<DtoFormLayoutPolicy> layoutPolicies;

	command updateLayoutPolicies(List<DtoFormLayoutPolicy> layoutPolicies);
	command setSectionCollapsed(String sectionId, boolean collapsed);
	command addOrReplaceField(DtoComponent* field);

	event sectionCollapsedStateChanged(String sectionId, boolean collapsed);
}

class DtoFormLayoutPolicy {
	 required int minWidth;
     required List<DtoFormSection> sections;
}

class DtoFormSection {
	required String id;
    required List<DtoGridColumn> columns;
    required List<DtoGridRow> rows;
    required List<DtoFormSectionPlacement> fieldPlacements;
    required DtoSpacing margin;
    required DtoSpacing padding;
    required DtoBorder border;
    required DtoBoxShadow shadow;
    required String backgroundColor;
    required boolean collapsible;
    required boolean collapsed;
    required boolean visible;
    required DtoTemplate* headerTemplate;
    required Object headerData;
    required boolean drawHeaderLine;
    required int gridGap; // pixels between fields, labels etc.
    required boolean fillRemainingHeight;
    required boolean hideWhenNoVisibleFields;
}

interface DtoFormSectionPlacement extends DtoGridPlacement {
}

class DtoFormSectionFieldPlacement implements DtoFormSectionPlacement {
	DtoComponent* field;
}

class DtoFormSectionFloatingFieldsPlacement implements DtoFormSectionPlacement {
	required List<DtoFormSectionFloatingField> floatingFields;
	required boolean wrap;
	required int horizontalSpacing;
	required int verticalSpacing;
	// we might also want to be able to align the items differently than "baseline" - maybe add a setting "verticalFieldAlignment"
}

class DtoFormSectionFloatingField {
	DtoComponent* field;
	int minWidth;
	int maxWidth;
	int minHeight;
    int maxHeight;
}

class DtoGridColumn {
	required DtoSizingPolicy widthPolicy;
	required int leftPadding;
	required int rightPadding;
}

class DtoGridRow {
	required DtoSizingPolicy heightPolicy;
    required int topPadding;
    required int bottomPadding;
}

interface DtoGridPlacement {
    int row;
    int column;
    int rowSpan;
    int colSpan;
    int minWidth;
    int maxWidth;
	int minHeight;
	int maxHeight;
    AlignItems verticalAlignment; // fall back to default defined on layout level!
    JustifyContent horizontalAlignment; // fall back to default defined on layout level!
}

class DtoComponentGridPlacement implements DtoGridPlacement {
	DtoComponent* component;
}

class DtoFloatingComponentGridPlacement implements DtoGridPlacement {
	List<DtoFloatingComponentGridPlacementItem> components;
	boolean wrap;
	int horizontalSpacing;
	int verticalSpacing;
	// we might also want to be able to align the items differently than "baseline" - maybe add a setting "verticalFieldAlignment"
}

class DtoFloatingComponentGridPlacementItem {
	DtoComponent* component;
	int minWidth;
	int maxWidth;
	int minHeight;
    int maxHeight;
}

class DtoSizingPolicy {
	required SizeType type;
    required double value;
    required int minAbsoluteSize;
}

enum SizeType {
	FIXED = "px",
	RELATIVE = "%",
	AUTO = "auto",
	FRACTION = "fr"
}
