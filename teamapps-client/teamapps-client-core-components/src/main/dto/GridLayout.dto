/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
package org.teamapps.dto;

import Component from "teamapps-client-core":org.teamapps.dto;

class StaticGridLayout extends Component {
	required GridLayout descriptor;

	command updateLayout(GridLayout descriptor);
}

class ResponsiveGridLayout extends Component {
	required List<ResponsiveGridLayoutPolicy> layoutPolicies;
	boolean fillHeight;

	command updateLayoutPolicies(List<ResponsiveGridLayoutPolicy> layoutPolicies);
	command setFillHeight(boolean fillHeight);
}

class ResponsiveGridLayoutPolicy {
	 required int minApplicableWidth;
     required GridLayout descriptor;
}

class GridLayout {
    required List<GridColumn> columns;
    required List<GridRow> rows;
    required List<GridPlacement> componentPlacements;
    Spacing margin;
    Spacing padding;
    Border border;
    Shadow shadow;
    String backgroundColor;
    int gridGap;
    VerticalElementAlignment verticalAlignment;
    HorizontalElementAlignment horizontalAlignment;
}

class GridColumn {
	SizingPolicy widthPolicy;
	int leftPadding;
	int rightPadding;
}

class GridRow {
	SizingPolicy heightPolicy;
    int topPadding;
    int bottomPadding;
}

interface GridPlacement {
    int row;
    int column;
    int rowSpan;
    int colSpan;
    int minWidth;
    int maxWidth;
	int minHeight;
	int maxHeight;
    VerticalElementAlignment verticalAlignment; // fall back to default defined on layout level!
    HorizontalElementAlignment horizontalAlignment; // fall back to default defined on layout level!
}

// =============== Component Placements ===============

class ComponentGridPlacement implements GridPlacement {
	required Component* component;
}

class FloatingComponentGridPlacement implements GridPlacement {
	required List<FloatingComponentGridPlacementItem> components;
	boolean wrap;
	int horizontalSpacing;
	int verticalSpacing;
	// we might also want to be able to align the items differently than "baseline" - maybe add a setting "verticalFieldAlignment"
}

class FloatingComponentGridPlacementItem {
	required Component* component;
	int minWidth;
	int maxWidth;
	int minHeight;
    int maxHeight;
}
