/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
package org.teamapps.dto;

import Component from "teamapps-client-core":org.teamapps.dto;

/*
	Layers (in order)
	 * backgroundImage
	 * Live stream video
	 * waiting video
	 * image overlay
	 * info text overlay
*/
class LiveStreamComponent extends Component {

	String backgroundImage; //display if no live stream of waiting video is available, null == transparent
	PageDisplayMode backgroundImageDisplayMode;
	double volume;

	/**
	 * Show these videos looping through them.
	 *
	 * @param videoInfos Video information. Durations are not required if specifying offsetSeconds=0.
	 * @param offsetMillis The offset at which the videos should start. Specify 0 to start from beginning.
	 * @param stopLiveStream Stop any live stream
	 */
	command showWaitingVideos(List<WaitingVideoInfo> videoInfos, long offsetSeconds, boolean stopLiveStream);
	command stopWaitingVideos();

	command startHttpLiveStream(String url);
	command startLiveStreamComLiveStream(String url);
	command startYouTubeLiveStream(String url);
	// TODO:
	command startCustomEmbeddedLiveStreamPlayer(String playerEmbedHtml, String embedContainerId); //the embedContainerId is the top level container of the embedding code for resizing and removal

	command stopLiveStream(); // if custom embedded player remove container

	/**
	 * Could potentially be used for any of the following: watermark, wpeaker's name of similar info, show photos
	 *
	 * The image overlay covers the complete player. In particular, mouse events are (for now) catched by this layer...
	 */
	command displayImageOverlay(String imageUrl, PageDisplayMode displayMode, boolean useVideoAreaAsFrame /* if no video is playing (use whole player area) ignore this flag, even if video comes later */);
	command removeImageOverlay();

	command displayInfoTextOverlay(String text); // position at bottom, use text size optimization code as is
	command removeInfoTextOverlay();

	command setVolume(double volume); // for liveStream AND waitingVideos!!

	event resultOfRequestInputDeviceAccess(boolean microphoneAccessGranted, boolean cameraAccessGranted);
	event resultOfRequestInputDeviceInfo(AudioInputDeviceInfo audioInputDeviceInfo, VideoInputDeviceInfo videoInputDeviceInfo);
}

class AbstractLiveStreamPlayer extends Component {
	command play(String url);
    command stop();
    command setVolume(double volume);
}

class MpegDashPlayer extends AbstractLiveStreamPlayer {}
class HttpLiveStreamPlayer extends AbstractLiveStreamPlayer {}
class LiveStreamComPlayer extends AbstractLiveStreamPlayer {}
class YoutubePlayer extends AbstractLiveStreamPlayer {}

class WaitingVideoInfo {
	required String url;
	required long durationInSeconds;
}

class AudioInputDeviceInfo {
}
class VideoInputDeviceInfo {
	int nativeWidth; //the native width of the camera resolution
	int nativeHeight;
}

class MediaInputSettings {
	boolean audio;
	int audioKiloBitsPerSecond;
	boolean video;
	int videoWidth;
	int videoHeight;
	int videoFps;
	int videoKiloBitsPerSecond;
}
