/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
package "teamapps-client-common-components":org.teamapps.projector.component.common;

import org.teamapps.projector.component.DtoComponent;
import org.teamapps.projector.template.DtoTemplate;
import org.teamapps.projector.record.DtoIdentifiableClientRecord;

class DtoMap extends DtoComponent {
	String accessToken;
	DtoMapConfig mapConfig;

	DtoMapType mapType;
	int zoomLevel;
	DtoMapLocation mapPosition;
	Dictionary<DtoAbstractMapShape> shapes;
	List<DtoMapMarkerClientRecord> markers;
	DtoMapMarkerCluster markerCluster;

	command addMarker(DtoMapMarkerClientRecord marker);
	command removeMarker(int id);
	command setMapMarkerCluster(DtoMapMarkerCluster cluster);

	command addShape(String shapeId, DtoAbstractMapShape shape);
	command updateShape(String shapeId, DtoAbstractMapShape shape);
	command removeShape(String shapeId);
	command clearShapes();
	command clearMarkers();
	command clearMarkerCluster();
	command clearHeatMap();

	command startDrawingShape(DtoMapShapeType shapeType, DtoShapeProperties shapeProperties);
	command stopDrawingShape();
	
	command setZoomLevel(int zoom);
	command setLocation(DtoMapLocation location);
	command setMapType(DtoMapType mapType);
	command setHeatMap(DtoHeatMapData data);
	command fitBounds(DtoMapLocation southWest, DtoMapLocation northEast);

	event zoomLevelChanged(int zoomLevel);
	event locationChanged(DtoMapLocation center, DtoMapArea displayedArea);
	event mapClicked(DtoMapLocation location);
	event markerClicked(int markerId);
	event shapeDrawn(String shapeId, DtoAbstractMapShape shape);
}

class DtoMapConfig {
	String urlTemplate;
	String id;
	int minZoom;
	int maxZoom;
	String attribution;
}

enum DtoMapType {
	INTERNAL,
	INTERNAL_DARK,
	INTERNAL_DARK_HIGH_RES,
	MAP_BOX_STREETS,
	MAP_BOX_STREETS_BASIC,
	MAP_BOX_STREETS_SATELLITE,
	MAP_BOX_SATELLITE,
	MAP_BOX_RUN_BIKE_HIKE,
	MAP_BOX_DARK,
	MAP_BOX_EMERALD,
	MAP_BOX_OUTDOORS,
	MAP_QUEST_OSM, MAP_QUEST_SATELLITE,
	OSM_TOPO_MAP,
	NASA_EARTH_AT_NIGHT,
	INFO_WEATHER_TEMPERATURE,
	THUNDERFOREST_DARK,
	THUNDERFOREST_TRANSPORT,
	WIKIMEDIA
}

@TypeScriptFactory
class DtoMapLocation {
	required double latitude;
	required double longitude;
}

@TypeScriptFactory
class DtoMapArea {
	required double minLatitude;
	required double maxLatitude;
	required double minLongitude;
	required double maxLongitude;
}

class DtoMapMarkerClientRecord extends DtoIdentifiableClientRecord {
	DtoMapLocation location;
    DtoTemplate* template; // null == use asString
    DtoMapMarkerAnchor anchor;
    int offsetPixelsX;
    int offsetPixelsY;
}

enum DtoMapMarkerAnchor {
	CENTER = "center",
	TOP = "top",
	BOTTOM = "bottom",
	LEFT = "left",
	RIGHT = "right",
	TOP_LEFT = "top-left",
	TOP_RIGHT = "top-right",
	BOTTOM_LEFT = "bottom-left",
	BOTTOM_RIGHT = "bottom-right";
}

class DtoMapMarkerCluster {
	required List<DtoMapMarkerClientRecord> markers;
}

class DtoHeatMapData {
	required List<DtoHeatMapDataElement> elements;
	int maxCount;
	int radius;
	int blur;
}

class DtoHeatMapDataElement {
	required double latitude;
	required double longitude;
	required int count;
}

enum DtoMapShapeType {
	CIRCLE,
    POLYGON,
    POLYLINE,
    RECTANGLE;
}

abstract class DtoAbstractMapShape {
	DtoShapeProperties shapeProperties;
}


abstract class DtoAbstractMapShapeChange {
}

class DtoMapCircle extends DtoAbstractMapShape {
	DtoMapLocation center;
	int radius; // meters
}

class DtoMapPolygon extends DtoAbstractMapShape {
	List<DtoMapLocation> path;
}

class DtoMapPolyline extends DtoAbstractMapShape {
	List<DtoMapLocation> path;
}


class DtoPolylineAppend extends DtoAbstractMapShapeChange {
    required List<DtoMapLocation> appendedPath;
}

class DtoMapRectangle extends DtoAbstractMapShape {
	DtoMapLocation l1;
	DtoMapLocation l2;
}

class DtoShapeProperties {
  String strokeColor;
  double strokeWeight;
  List<Double> strokeDashArray;
  String fillColor;
}
