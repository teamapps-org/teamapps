/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
package "teamapps-client-common-components":org.teamapps.projector.components.common.dto;

import org.teamapps.projector.dto.DtoComponent;
import org.teamapps.projector.dto.DtoSpacing;
import org.teamapps.projector.dto.DtoBorder;
import org.teamapps.projector.dto.DtoShadow;
import org.teamapps.projector.dto.DtoVerticalElementAlignment;
import org.teamapps.projector.dto.DtoHorizontalElementAlignment;
import org.teamapps.projector.dto.DtoSizingPolicy;

class DtoStaticGridLayout extends DtoComponent {
	required DtoGridLayout descriptor;

	command updateLayout(DtoGridLayout descriptor);
}

class DtoResponsiveGridLayout extends DtoComponent {
	required List<DtoResponsiveGridLayoutPolicy> layoutPolicies;
	boolean fillHeight;

	command updateLayoutPolicies(List<DtoResponsiveGridLayoutPolicy> layoutPolicies);
	command setFillHeight(boolean fillHeight);
}

class DtoResponsiveGridLayoutPolicy {
	 required int minApplicableWidth;
     required DtoGridLayout descriptor;
}

class DtoGridLayout {
    required List<DtoGridColumn> columns;
    required List<DtoGridRow> rows;
    required List<DtoGridPlacement> componentPlacements;
    DtoSpacing margin;
    DtoSpacing padding;
    DtoBorder border;
    Shadow shadow;
    String backgroundColor;
    int gridGap;
    VerticalElementAlignment verticalAlignment;
    HorizontalElementAlignment horizontalAlignment;
}

class DtoGridColumn {
	DtoSizingPolicy widthPolicy;
	int leftPadding;
	int rightPadding;
}

class DtoGridRow {
	DtoSizingPolicy heightPolicy;
    int topPadding;
    int bottomPadding;
}

interface DtoGridPlacement {
    int row;
    int column;
    int rowSpan;
    int colSpan;
    int minWidth;
    int maxWidth;
	int minHeight;
	int maxHeight;
    VerticalElementAlignment verticalAlignment; // fall back to default defined on layout level!
    HorizontalElementAlignment horizontalAlignment; // fall back to default defined on layout level!
}

// =============== DtoComponent Placements ===============

class DtoComponentGridPlacement implements DtoGridPlacement {
	required DtoComponent* component;
}

class DtoFloatingComponentGridPlacement implements DtoGridPlacement {
	required List<FloatingComponentGridPlacementItem> components;
	boolean wrap;
	int horizontalSpacing;
	int verticalSpacing;
	// we might also want to be able to align the items differently than "baseline" - maybe add a setting "verticalFieldAlignment"
}

class DtoFloatingComponentGridPlacementItem {
	required DtoComponent* component;
	int minWidth;
	int maxWidth;
	int minHeight;
    int maxHeight;
}
