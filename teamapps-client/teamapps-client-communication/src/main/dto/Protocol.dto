/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
package org.teamapps.dto.protocol;

abstract class AbstractClientMessage {
	 required String sessionId;
}

class INIT extends AbstractClientMessage {
    required ClientInfo clientInfo;
    required int maxRequestedCommandId;
}

class REINIT extends AbstractClientMessage {
    required int lastReceivedCommandId;
    required int maxRequestedCommandId;
}

abstract class AbstractClientPayloadMessage extends AbstractClientMessage {
	required int id;
}

class EVT extends AbstractClientPayloadMessage {
    required Event uiEvent;
}

interface Event {
    String componentId;
}

class QRY extends AbstractClientPayloadMessage {
    required Query uiQuery;
}

interface Query {
   String componentId;
}

class CMD_RES extends AbstractClientPayloadMessage {
	required int cmdId;
	required Object result;
}

class CMD_REQ extends AbstractClientMessage {
	required int lastReceivedCommandId;
	required int maxRequestedCommandId;
}


class KEEPALIVE extends AbstractClientMessage {
}

class TERMINATE extends AbstractClientMessage {
}

@TypeScriptFactory
class ClientInfo {
	int screenWidth;
	int screenHeight;
	int viewPortWidth;
	int viewPortHeight;
	boolean highDensityScreen;
	String timezoneIana;
	int timezoneOffsetMinutes;
	List<String> clientTokens;
	Location location;
	Dictionary<String> clientParameters;
	String teamAppsVersion;
}

@TypeScriptFactory
class Location {

	/**
	 * Returns the complete URL.
	 * <p>
	 * Non-null.
	 */
	String href;

	/**
	 * Returns the URL's origin.
	 * <p>
	 * The origin is a String containing the Unicode serialization of the origin of the represented URL.
	 * <p>
	 * That is, for a URL using the http or https, the scheme followed by '://', followed by the domain, followed by ':',
	 * followed by the port, if explicitly specified.
	 * <p>
	 * Non-null.
	 */
	String origin;

	/**
	 * Returns the URL's protocol scheme.
	 * <p>
	 * Non-null.
	 */
	String protocol;

	/**
	 * Returns the URL's host and port (if different from the default port for the scheme).
	 * <p>
	 * Non-null.
	 */
	String host;

	/**
	 * Returns the URL's hostname. This may be the domain name (DNS), the IPv4 address (e.g. "93.184.216.34"),
	 * or IPv6 address in brackets (e.g. "[2606:2800:220:1:248:1893:25c8:1946]"), depending on the URL.
	 * <p>
	 * Non-null.
	 */
	String hostname;

	/**
	 * Returns the URL's port number.
	 * <p>
	 * Note that this can be null if the port number is not explicitly specified in the URL.
	 */
	Integer port;

	/**
	 * Returns the URL's path. This can (by the JavaScript spec) be an empty string (""), a single slash "/", or any path string.
	 * <p>
	 * Non-null.
	 */
	String pathname;

	/**
	 * Returns the URL's query (including the leading "?" if non-empty).
	 * <p>
	 * Non-null (empty string if empty).
	 */
	String search;

	/**
	 * Returns the URL's fragment (includes leading "#" if non-empty)
	 * <p>
	 * Non-null (empty string if empty).
	 */
	String hash;

}

abstract class AbstractServerMessage { }

class INIT_OK extends AbstractServerMessage {
	required int minRequestedCommands;
	required int maxRequestedCommands;
	required int sentEventsBufferSize;
	required long keepaliveInterval;
}

class INIT_NOK extends AbstractServerMessage {
	required SessionClosingReason reason;
}

class REINIT_OK extends AbstractServerMessage {
    required int lastReceivedEventId;
}

class REINIT_NOK extends AbstractServerMessage {
    required SessionClosingReason reason;
}

class PING extends AbstractServerMessage { // Actively request a keepalive message from the client.
}

class SESSION_CLOSED extends AbstractServerMessage {
    required SessionClosingReason reason;
    String message;
}

enum SessionClosingReason {
	// EXPIRED
	SESSION_NOT_FOUND,    			// reacting to unknown client
	SESSION_TIMEOUT,      			// actively sent by server
	TERMINATED_BY_CLIENT, 			// got leaving beacon

	// ERROR
	SERVER_SIDE_ERROR,    			// every uncaught exception on the server side within the client's SessionContext...
	COMMANDS_OVERFLOW,    			// server-side command queue filled up
	REINIT_COMMAND_ID_NOT_FOUND, 	// server did not find the command id the client would like to resume at
	CMD_REQUEST_TOO_LARGE, 			// the client is requesting a too high amount of commands
	WRONG_TEAMAPPS_VERSION,          // The client is connecting with another teamapps version than the server serves.

	// TERMINATED
	TERMINATED_BY_APPLICATION 		// SessionContext.destroy() called
}

class MULTI_CMD extends AbstractServerMessage {
    required List<Object> cmds; // the CMD class does not get generated!
}

@NotGenerated
class CMD {
    required int id;      // the (sequential) id of this command
    required String lid;  // libraryUuid
    required String cid;  // clientObjectId
    required String c;    // uiCommand
    required Boolean r;   // awaitsResponse
}

interface Command<RESULT> {
}

class QRY_RES extends AbstractServerMessage {
    required int queryId;
    required Object result;
}
