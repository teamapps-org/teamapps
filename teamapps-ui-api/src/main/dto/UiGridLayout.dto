/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
package org.teamapps.dto;

class UiStaticGridLayout extends UiComponent {
	required UiGridLayout descriptor;

	command updateLayout(UiGridLayout descriptor);
}

class UiResponsiveGridLayout extends UiComponent {
	required List<UiResponsiveGridLayoutPolicy> layoutPolicies;
	boolean fillHeight = false;

	command updateLayoutPolicies(List<UiResponsiveGridLayoutPolicy> layoutPolicies);
	command setFillHeight(boolean fillHeight);
}

class UiResponsiveGridLayoutPolicy {
	 required int minApplicableWidth;
     required UiGridLayout descriptor;
}

class UiGridLayout {
    required List<UiGridColumn> columns;
    required List<UiGridRow> rows;
    required List<UiGridPlacement> componentPlacements;
    UiSpacing margin;
    UiSpacing padding;
    UiBorder border;
    UiShadow shadow;
    String backgroundColor;
    int gridGap = 7;
    UiVerticalElementAlignment verticalAlignment = UiVerticalElementAlignment.STRETCH;
    UiHorizontalElementAlignment horizontalAlignment = UiHorizontalElementAlignment.STRETCH;
}

class UiGridColumn {
	UiSizingPolicy widthPolicy;
	int leftPadding;
	int rightPadding;
}

class UiGridRow {
	UiSizingPolicy heightPolicy;
    int topPadding;
    int bottomPadding;
}

interface UiGridPlacement {
    int row;
    int column;
    int rowSpan = 1;
    int colSpan = 1;
    int minWidth;
    int maxWidth;
	int minHeight;
	int maxHeight;
    UiVerticalElementAlignment verticalAlignment = null; // fall back to default defined on layout level!
    UiHorizontalElementAlignment horizontalAlignment = null; // fall back to default defined on layout level!
}

// =============== Component Placements ===============

class UiComponentGridPlacement implements UiGridPlacement {
	required UiComponent* component;
}

class UiFloatingComponentGridPlacement implements UiGridPlacement {
	required List<UiFloatingComponentGridPlacementItem> components;
	boolean wrap;
	int horizontalSpacing;
	int verticalSpacing;
	// we might also want to be able to align the items differently than "baseline" - maybe add a setting "verticalFieldAlignment"
}

class UiFloatingComponentGridPlacementItem {
	required UiComponent* component;
	int minWidth;
	int maxWidth;
	int minHeight;
    int maxHeight;
}
