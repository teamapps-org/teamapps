/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
package org.teamapps.dto;

enum UiSortDirection {
	ASC, DESC
}

class UiTableColumn {
	required String propertyName;
	required String icon;
	required String title;
	required UiField* field;
	int minWidth;
	int defaultWidth;
	int maxWidth;
	boolean sortable = true;
	boolean resizeable = true;
	boolean visible = true;
	boolean hiddenIfOnlyEmptyCellsVisible = false;
	List<UiFieldMessage> messages;
	UiTextAlignment headerAlignment;
}

class UiTable extends UiComponent {
	required List<UiTableColumn> columns;

	boolean displayAsList; // list has no cell borders, table has. selection policy: list = row selection, table = cell selection
	boolean forceFitWidth; //if true, force the widths of all columns to fit into the available space of the list
	int rowHeight = 28;
	boolean stripedRows = true;
	String stripedRowColorEven = "rgb(255, 255, 255)";
	String stripedRowColorOdd = "rgba(0, 0, 0, 0.05)";
	boolean hideHeaders; //if true, do not show any headers
	boolean allowMultiRowSelection = true;
	String selectionColor = "rgb(222, 238, 255)"; // null = default color
	int rowBorderWidth = 1; // even in list mode! the border will be there but transparent!
	String rowBorderColor = "rgb(204, 204, 204)";

	boolean showRowCheckBoxes; //if true, show check boxes on the left
	boolean showNumbering; //if true, show numbering on the left
	boolean textSelectionEnabled;

	String sortField; //if available the table is initially sorted by this field
	UiSortDirection sortDirection = UiSortDirection.ASC;

	boolean editable; //only valid for tables

	boolean treeMode; //if true, use the parent id property of record to display the table as tree
	String indentedColumnName; // if set, indent this column depending on the depth in the data hierarchy
	int indentation = 15; // in pixels

	UiSelectionFrame selectionFrame;

	boolean contextMenuEnabled = false;

	command clearTable();
	command updateData(int startIndex, List<Integer> recordIds, List<UiTableClientRecord> newRecords, int totalNumberOfRecords);
	command setSorting(String sortField, UiSortDirection sortDirection);
    command setCellValue(int recordId, String columnPropertyName, Object value);
	command markTableField(int recordId, String columnPropertyName, boolean mark); //mark or unmark the field to indicate errors or missing data
	command clearAllFieldMarkings();
	command setRecordBold(int recordId, boolean bold); //TODO
	command selectRecords(List<Integer> recordIds, boolean scrollToFirstRecord);
	command selectRows(List<Integer> rowIndexes, boolean scrollToFirstRowIndex);
	command editCellIfAvailable(int recordId, String propertyName);
	command cancelEditingCell(int recordId, String propertyName);
	command focusCell(int recordId, String columnPropertyName);
    command setSingleCellMessages(int recordId, String columnPropertyName, List<UiFieldMessage> messages);
    command clearAllCellMessages();
    command setColumnMessages(String columnPropertyName, List<UiFieldMessage> messages);
    command addColumns(List<UiTableColumn> column, int index);
    command removeColumns(List<String> columnName);
    command setColumnVisibility(String columnPropertyName, boolean visible);
	command setContextMenuContent(int requestId, UiComponent* component);
	command closeContextMenu(int requestId);

	event cellClicked(int recordId, String columnPropertyName);
	event cellEditingStarted(int recordId, String columnPropertyName, Object currentValue);
	event cellEditingStopped(int recordId, String columnPropertyName);
	event cellValueChanged(int recordId, String columnPropertyName, Object value);
	event rowsSelected(List<Integer> recordIds);
	event sortingChanged(String sortField, UiSortDirection sortDirection); // sent when the user clicks on a sortable header column
	event displayedRangeChanged(int startIndex, int length);
	event contextMenuRequested(int requestId, int recordId);

	event fieldOrderChange(String columnPropertyName, int position); //zero based
	event columnSizeChange(String columnPropertyName, int size);

	// =========== header/footer row ("outerRow") ===========
	boolean showHeaderRow = false;
    int headerRowBorderWidth = 1; // even in list mode! the border will be there but transparent!
    String headerRowBorderColor = "rgb(204, 204, 204)";
    int headerRowHeight = 28;
    String headerRowBackgroundColor = "rgba(0, 0, 0, 0.05)";
    Dictionary<UiField*> headerRowFields;

	boolean showFooterRow = false;
    int footerRowBorderWidth = 1; // even in list mode! the border will be there but transparent!
    String footerRowBorderColor = "rgb(204, 204, 204)";
    int footerRowHeight = 28;
    String footerRowBackgroundColor = "rgba(0, 0, 0, 0.05)";
    Dictionary<UiField*> footerRowFields;
}

@TypeScriptFactory
class UiTableDataRequest {
	required int startIndex;
	required int length;
	required String sortField;
	required UiSortDirection sortDirection;
}

class UiTableCellMessages {
	required int recordId;
	required Dictionary<List<UiFieldMessage>> messages;
}

class UiSelectionFrame {
	String color = "rgb(102, 174, 232)";
	int borderWidth = 2;
	int animationDuration = 100; // ms
	int glowingWidth = 5;
	int shadowWidth = 0;
	boolean fullRow = false;
}

class UiTableClientRecord extends UiIdentifiableClientRecord {
	Dictionary<List<UiFieldMessage>> messages;
	List<String> markings;
	boolean selected;
	boolean bold;
}
