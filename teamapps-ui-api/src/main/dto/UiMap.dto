/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2025 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
class UiMap extends UiComponent {
	required Dictionary<UiTemplate> markerTemplates;
	String accessToken;
	UiMapConfig mapConfig;

	UiMapType mapType = UiMapType.MAP_BOX_STREETS;
	int zoomLevel = 5;
	UiMapLocation mapPosition;
	Dictionary<AbstractUiMapShape> shapes;
	List<UiMapMarkerClientRecord> markers;
	UiMapMarkerCluster markerCluster;

	command registerTemplate(String id, UiTemplate template);
	command addMarker(UiMapMarkerClientRecord marker);
	command removeMarker(int id);
	command setMapMarkerCluster(UiMapMarkerCluster cluster);

	command addShape(String shapeId, AbstractUiMapShape shape);
	command updateShape(String shapeId, AbstractUiMapShape shape);
	command removeShape(String shapeId);
	command clearShapes();
	command clearMarkers();
	command clearMarkerCluster();
	command clearHeatMap();

	command startDrawingShape(UiMapShapeType shapeType, UiShapeProperties shapeProperties);
	command stopDrawingShape();
	
	command setZoomLevel(int zoom);
	command setLocation(UiMapLocation location);
	command setMapType(UiMapType mapType);
	command setHeatMap(UiHeatMapData data);
	command fitBounds(UiMapLocation southWest, UiMapLocation northEast);

	event zoomLevelChanged(int zoomLevel);
	event locationChanged(UiMapLocation center, UiMapArea displayedArea);
	event mapClicked(UiMapLocation location);
	event markerClicked(int markerId);
	event shapeDrawn(String shapeId, AbstractUiMapShape shape);
}

class UiMapConfig {
	String urlTemplate;
	String id = "";
	int minZoom = 1;
	int maxZoom = 18;
	String attribution = "";
}

enum UiMapType {
	INTERNAL,
	INTERNAL_DARK,
	INTERNAL_DARK_HIGH_RES,
	MAP_BOX_STREETS,
	MAP_BOX_STREETS_BASIC,
	MAP_BOX_STREETS_SATELLITE,
	MAP_BOX_SATELLITE,
	MAP_BOX_RUN_BIKE_HIKE,
	MAP_BOX_DARK,
	MAP_BOX_EMERALD,
	MAP_BOX_OUTDOORS,
	MAP_QUEST_OSM, MAP_QUEST_SATELLITE,
	OSM_TOPO_MAP,
	NASA_EARTH_AT_NIGHT,
	INFO_WEATHER_TEMPERATURE,
	THUNDERFOREST_DARK,
	THUNDERFOREST_TRANSPORT,
	WIKIMEDIA
}

@TypeScriptFactory
class UiMapLocation {
	required float latitude;
	required float longitude;
}

@TypeScriptFactory
class UiMapArea {
	required float minLatitude;
	required float maxLatitude;
	required float minLongitude;
	required float maxLongitude;
}

class UiMapMarkerClientRecord extends UiIdentifiableClientRecord {
	UiMapLocation location;
    String templateId; // null == use asString
    UiMapMarkerAnchor anchor;
    int offsetPixelsX;
    int offsetPixelsY;
}

enum UiMapMarkerAnchor {
	CENTER = "center",
	TOP = "top",
	BOTTOM = "bottom",
	LEFT = "left",
	RIGHT = "right",
	TOP_LEFT = "top-left",
	TOP_RIGHT = "top-right",
	BOTTOM_LEFT = "bottom-left",
	BOTTOM_RIGHT = "bottom-right";
}

class UiMapMarkers {
	required List<UiMapMarkerClientRecord> markers;
}

class UiMapMarkerCluster extends UiMapMarkers {
	int clusterRadius = 100;
}

class UiHeatMapData {
	required List<UiHeatMapDataElement> elements;
	int maxCount = 10;
	int radius = 25;
	int blur = 15;
}

class UiHeatMapDataElement {
	required float latitude;
	required float longitude;
	required int count;
}

enum UiMapShapeType {
	CIRCLE,
    POLYGON,
    POLYLINE,
    RECTANGLE;
}

abstract class AbstractUiMapShape {
	UiShapeProperties shapeProperties;
}


abstract class AbstractUiMapShapeChange {
}

@TypeScriptFactory
class UiMapCircle extends AbstractUiMapShape {
	UiMapLocation center;
	int radius; // meters
}

@TypeScriptFactory
class UiMapPolygon extends AbstractUiMapShape {
	List<UiMapLocation> path;
}

@TypeScriptFactory
class UiMapPolyline extends AbstractUiMapShape {
	List<UiMapLocation> path;
}


class UiPolylineAppend extends AbstractUiMapShapeChange {
    required List<UiMapLocation> appendedPath;
}

@TypeScriptFactory
class UiMapRectangle extends AbstractUiMapShape {
	UiMapLocation l1;
	UiMapLocation l2;
}

class UiShapeProperties {
  String strokeColor;
  float strokeWeight;
  List<Float> strokeDashArray;
  String fillColor;
}
