Check if specialized Components (like SimpleCalendar) work

requirements for the maven plugin:
* copy DTO files to JAR
* import all DTO models from dependencies while generating
* generate DTOs (Java and Typescript)
    * make TypeScript output path configurable
* delete them on maven clean (TypeScript)
* add generated sources to compilation path
* add result of JavaScript build process to JAR
* sync pom version to package (optionally)
* make sure the teamapps plugin checks that teamapps dependencies are marked as provided!
* make projector-client-object-api an implicit DTO dependency

Low prio:
Table:
* column builder; return one when invoking addColumn() and listen to build() method.
* setHideHeaders() WTF...

Upgrade FullCalendar to version 6 (and get rid of moment.js there)

use external imports for references to concrete ClientObject instances instead of the generic ClientObject in DTOs. Example DtoTemplateField.template
Also use this for DateTimeFormatDescriptor...

make Label NOT a field. It is not!

rewrite README

enable TypeScript strict null checking for the core at least

change generation target packages:
 - core-components: org.teamapps.projector.component.core
 - no .dto!! (nowhere!) Many classes are now fully integrated (especially enums!)
rename "public .* (to|create)Ui\w+\(\)" methods to something more DTO like (or get rid of them)
introduce simplistic record-based DTO data objects that can replace many Java copy classes (same reason as for enums. It's just unnecessary to have them unless they provide some functionality).

distribute .less files! (currently most are in client-core-components)

On the Java side: replace milliseconds with Duration

rename document-viewer to document-previewer


rename teamapps-ux to projector-server-core

get rid of eval(...) in JS code by introducing Script as ClientObject (Script must be triggerable from the client side!)

get rid of ProjectorTranslationKeys

update license headers (upgrade plugin - super outdated!)

search and replace "Ui" in .less and .ts
same for "Dto" when referring to CSS classes!

Server-side: replace `new ProjectorEvent<>(clientObjectChannel::toggleXyzEvent);` with 'clientObjectChannel.getToggleXyzEvent() // will do the toggling internally
Client-side: get rid of Component.registerEvents() and get the event instances from the serverObjectChannel instead?

make icon a client object (represented as a simple string on the client?), so you don't have to manually resolve icons?

check if registering a client-side event listener is enough to render the object on the client side. If so, change this!!

Simplify the button interface. For template-based buttons, introduce another component

Make it two Script implementations: one inline, one loaded