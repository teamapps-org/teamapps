/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
typeScriptFilePrelude() ::= <<
/**
 * THIS IS GENERATED CODE!
 * PLEASE DO NOT MODIFY - ALL YOUR WORK WOULD BE LOST!
 */
>>

classConfigDefinition(c) ::= <<
<typeScriptFilePrelude()>

<c.allReferencedClassesAndInterfaces:{c|import {Dto<c.typeScriptIdentifier>\} from "./Dto<c.typeScriptIdentifier>";}; separator="\n">
<c.allReferencedEnums:{e|import {Dto<e.Identifier>\} from "./Dto<e.Identifier>";}; separator="\n">
<c.superClassAndDirectlyImplementedInterfacesWithCommands:{c|import {Dto<c.Identifier>CommandHandler\} from "./Dto<c.typeScriptIdentifier>";}; separator="\n">
<c.superClassAndDirectlyImplementedInterfacesWithEvents:{c|import {Dto<c.Identifier>EventSource\} from "./Dto<c.typeScriptIdentifier>";}; separator="\n">
<if(c.hasCommands)>import {DtoCommand} from "teamapps-client-communication";<endif>
<if(c.hasEvents)>import {DtoEvent} from "teamapps-client-communication";
import {TeamAppsEvent} from "../util/TeamAppsEvent";<endif>
<if(c.hasQueries)>import {DtoQuery} from "teamapps-client-communication";<endif>
<c.imports:{imp|import {Dto<imp.Identifier>\} from <imp.StringLiteral>;}; separator="\n">

export interface Dto<c.typeScriptIdentifier> <if(c.superClassAndDirectlyImplementedInterfaces)>extends <c.superClassAndDirectlyImplementedInterfaces:{c|Dto<c.typeScriptIdentifier>};  separator=", "> <endif>{
	_type?: string;
	<c.propertyDeclaration:typeScriptPropertyDeclaration(false); separator=";\n">
	<c.queryDeclaration:queryDeclaration(); separator=";\n">
}

<if(c.referencableBaseClass)>
export interface <c.Identifier>Reference {
	<c.referencableProperties:typeScriptPropertyDeclaration(true); separator="\n">
}
<endif>

<if(c.typescriptFactoryAnnotation)>
export function createDto<c.typeScriptIdentifier; format="cap">(<c.allRequiredProperties:parameter(false); separator=", "><if(c.allRequiredProperties && c.allNonRequiredProperties)>, <endif><if(c.allNonRequiredProperties)>nonRequiredProperties?: {<c.allNonRequiredProperties:parameter(true); separator=", ">}<endif>): Dto<c.typeScriptIdentifier> {
	return {
		_type: "<c.Identifier.text>"<if(c.allProperties)>,<endif>
		<c.allRequiredProperties:{p|<p.Identifier>}; separator=", "><if(c.allRequiredProperties && c.allNonRequiredProperties)>,<endif>
		<if(c.allNonRequiredProperties)>...(nonRequiredProperties||{})<endif>
	};
}
<endif>

<if(c.hasCommands)>
export interface Dto<c.Identifier.text>CommandHandler <if(c.superClassAndDirectlyImplementedInterfacesWithCommands)>extends <c.superClassAndDirectlyImplementedInterfacesWithCommands:{c|<c.Identifier>CommandHandler}; separator=", "> <endif>{
	<c.nonStaticCommandDeclarations:commandMethodStub(); separator="\n">
}
<endif>

<if(c.hasEvents)>
export interface Dto<c.Identifier>EventSource <if(c.superClassAndDirectlyImplementedInterfacesWithEvents)>extends <c.superClassAndDirectlyImplementedInterfacesWithEvents:{c|<c.Identifier>EventSource}; separator=", "> <endif>{
	<c.nonStaticEventDeclarations:teamAppsEventDeclaration(); separator="\n">
}
<endif>

<c.eventDeclaration:eventInterface(); separator="\n\n">

<c.queryDeclaration:queryInterface(); separator="\n\n">
>>

commandMethodStub(cmd) ::= <<
<cmd.Identifier>(<cmd.formalParameterWithDefault:parameter(false); separator=", ">): <if(cmd.type)>Promise\<<cmd.type.typeScriptType>\>|<cmd.type.typeScriptType><else>any<endif>;
>>

teamAppsEventDeclaration(evt) ::= <<
on<evt.Identifier.text; format="cap">: TeamAppsEvent\<<evt.typeScriptInterfaceName>\>;
>>

eventInterface(evt) ::= <<
export interface <evt.typeScriptInterfaceName> extends DtoEvent {
	<evt.formalParameterWithDefault:typeScriptPropertyDeclaration(true); separator=";\n">
}
>>

queryInterface(q) ::= <<
export interface <q.typeScriptInterfaceName> extends DtoQuery {
	<q.formalParameterWithDefault:typeScriptPropertyDeclaration(true); separator=";\n">
}
>>

parameter(p, optional) ::= "<p.Identifier><if(optional)>?<endif>: <p.type.typeScriptType>"

interfaceConfigDefinition(c) ::= <<
<typeScriptFilePrelude()>

<c.allReferencedClassesAndInterfaces:{c|import {Dto<c.typeScriptIdentifier>\} from "./Dto<c.typeScriptIdentifier>";}; separator="\n">
<c.allReferencedEnums:{e|import {<e.Identifier>\} from "./<e.Identifier>";}; separator="\n">
<c.superClassAndDirectlyImplementedInterfacesWithCommands:{c|import Dto{<c.Identifier>CommandHandler\} from "./Dto<c.typeScriptIdentifier>";}; separator="\n">
<c.superClassAndDirectlyImplementedInterfacesWithEvents:{c|import Dto{<c.Identifier>EventSource\} from "./Dto<c.typeScriptIdentifier>";}; separator="\n">
<if(c.hasCommands)>import {DtoCommand} from "teamapps-client-communication";<endif>
<if(c.hasEvents)>import {DtoEvent} from "teamapps-client-communication";
import {TeamAppsEvent} from "../util/TeamAppsEvent";<endif>
<if(c.hasQueries)>import {DtoQuery} from "teamapps-client-communication";<endif>

export interface Dto<c.typeScriptIdentifier> <if(c.superInterfaces)>extends <c.superInterfaces:{superInterface|Dto<superInterface.typeScriptIdentifier>}; separator=", "> <endif>{
	_type?: string;
	<c.propertyDeclaration:typeScriptPropertyDeclaration(false); separator=";\n">
	<c.queryDeclaration:queryDeclaration(); separator=";\n">
}

<if(c.referencableBaseClass)>
export interface Dto<c.Identifier>Reference {
	<c.referencableProperties:typeScriptPropertyDeclaration(true); separator="\n">
}
<endif>

<if(c.hasCommands)>
export interface Dto<c.Identifier.text>CommandHandler <if(c.superInterfacesWithCommands)>extends <c.superInterfacesWithCommands:{c|<c.Identifier>CommandHandler}; separator=", "> <endif>{
	<c.nonStaticCommandDeclarations:commandMethodStub(); separator="\n">
}
<endif>

<if(c.hasEvents)>
export interface Dto<c.Identifier>EventSource <if(c.superInterfacesWithEvents)>extends <c.superInterfacesWithEvents:{c|<c.Identifier>EventSource}; separator=", "> <endif>{
	<c.eventDeclaration:teamAppsEventDeclaration(); separator="\n">
}
<endif>

<c.eventDeclaration:eventInterface(); separator="\n\n">

<c.queryDeclaration:queryInterface(); separator="\n\n">
>>

typeScriptPropertyDeclaration(p, forceRequired) ::= <<
<p.Identifier.text><if(!p.requiredModifier && !forceRequired)>?<endif>: <p.type.typeScriptType>
>>

queryDeclaration(q) ::= <<
<q.Identifier.text>: (query: <q.typeScriptInterfaceName>) => Promise\<<q.type.typeScriptType>\>
>>

enum(e) ::= <<
<typeScriptFilePrelude()>
export enum Dto<e.Identifier> {
	<if(e.hasStringValues)>
	<e.enumConstant:{ec|<ec.Identifier> = <ec.StringLiteral>}; separator=", ">
	<else>
	<e.enumConstant:{ec|<ec.Identifier>}; separator=", ">
	<endif>
}
>>

eventNamesObject(c, static) ::= <<
<if(static)>{ componentType: "<c.Identifier.text>", eventDescriptors: [<c.allStaticEvents:{e|{name: "<e.Identifier.text>", _type: "<e._type>"\}}; separator=", ">] }<else>{ componentType: "<c.Identifier.text>", eventDescriptors: [<c.allNonStaticEvents:{e|{name: "<e.Identifier.text>", _type: "<e._type>"\}}; separator=", ">] }<endif>
>>

indexTs(classes, interfaces, enums) ::= <<
<interfaces:{c|export * from "./Dto<c.typeScriptIdentifier>";}; separator="\n">
<classes:{c|export * from "./Dto<c.typeScriptIdentifier>";}; separator="\n">
<enums:{c|export * from "./Dto<c.typeScriptIdentifier>";}; separator="\n">
>>