/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
class(c) ::= <<
<javaFilePrelude(c.packageName)>

<c.effectiveJavaImports:{im|import <im.javaPackageName>.<im.dtoName>;}; separator="\n">

@JsonTypeName("<c.Identifier>")
@JsonInclude(JsonInclude.Include.NON_NULL)
public <if(c.abstractModifier)>abstract <endif>class <c.javaClassName> <if(c.superClassDecl)>extends Dto<c.superClassDecl.typeName.text> <endif>implements <if(c.implementsDecl)><c.implementsDecl.classList.typeName:{id|Dto<id.text>}; separator=", ">, <endif>DtoObject {

    public static final String TYPE_ID = "<c.Identifier>";
    public static final List\<String\> EVENT_NAMES = List.of(<c.allEvents:{e|"<e.Identifier.text>"}; separator=", ">);
    public static final List\<String\> QUERY_NAMES = List.of(<c.allQueries:{q|"<q.Identifier.text>"}; separator=", ">);

	<c.propertiesNotImplementedBySuperClasses:fieldDeclaration(); separator="\n">

	<constructor(c, "Dto", "")>

	<toString(c)>

	<c.propertiesNotImplementedBySuperClasses:getter(); separator="\n\n">

	<c.propertiesNotImplementedBySuperClasses:setter(c.javaClassName); separator="\n\n">

	<c.eventDeclaration:eventClass(); separator="\n\n">
	<c.eventDeclaration:eventJsonWrapper(); separator="\n\n">

	<c.queryDeclaration:queryClass(); separator="\n\n">
	<c.queryDeclaration:eventJsonWrapper(); separator="\n\n">

    <if(c.managed)>
        <typeIdGetter(c)>
        <eventListGetter(c)>
        <queryListGetter(c)>
    <endif>

	<c.commandDeclaration:commandClass(); separator="\n\n">

}>>

typeIdGetter(c) ::= <<
@com.fasterxml.jackson.annotation.JsonIgnore
public String getTypeId() {
    return TYPE_ID;
}
>>

eventListGetter(c) ::= <<
@com.fasterxml.jackson.annotation.JsonIgnore
public List\<String\> getEventNames() {
    return EVENT_NAMES;
}
>>

queryListGetter(c) ::= <<
@com.fasterxml.jackson.annotation.JsonIgnore
public List\<String\> getQueryNames() {
    return QUERY_NAMES;
}
>>

classReference(c) ::= <<
<javaFilePrelude(c.packageName)>
@JsonTypeName("<c.Identifier>Reference")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class <c.javaClassName>Reference implements DtoObject {
	<c.referencableProperties:fieldDeclaration(); separator="\n">

	public Dto<c.Identifier.text; format="cap">Reference(<c.referencableProperties:parameter(); separator=", ">) {
    	<c.referencableProperties:propertyAssignment(); separator="\n">
    }

	<c.referencableProperties:getter(); separator="\n\n">

}>>

interface(c) ::= <<
<javaFilePrelude(c.packageName)>

<c.effectiveJavaImports:{im|import <im.javaPackageName>.<im.dtoName>;}; separator="\n">

@JsonTypeName("<c.Identifier>")
@JsonInclude(JsonInclude.Include.NON_NULL)
public interface <c.javaClassName><if(c.typeArguments)><c.typeArguments.text><endif> extends <if(c.superInterfaceDecl)><c.superInterfaces:{si|<si.javaClassName>}; separator=", ">, <endif>DtoObject {

	<c.propertyDeclaration:getterStub(); separator="\n">
	<c.nonRequiredProperties:setterStub(c); separator="\n">
	
	<c.eventDeclaration:eventClass(); separator="\n\n">
    <c.eventDeclaration:eventJsonWrapper(); separator="\n\n">

	<c.queryDeclaration:queryClass(); separator="\n\n">
	<c.queryDeclaration:eventJsonWrapper(); separator="\n\n">

	<c.commandDeclaration:commandClass(); separator="\n\n">

    <if(c.managedModifier)>
    @com.fasterxml.jackson.annotation.JsonIgnore
    public String getTypeId();
    @com.fasterxml.jackson.annotation.JsonIgnore
    public List\<String\> getEventNames();
    @com.fasterxml.jackson.annotation.JsonIgnore
    public List\<String\> getQueryNames();
    <endif>

}>>

javaFilePrelude(packageName) ::= <<
package <packageName>;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.stream.StreamSupport;

import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ArrayNode;

import org.teamapps.dto.DtoJsonWrapper;
import org.teamapps.dto.DtoObject;

/**
 * THIS IS GENERATED CODE!
 * PLEASE DO NOT MODIFY - ALL YOUR WORK WOULD BE LOST!
 */
>>

fieldDeclaration(p) ::= <<
protected <p.type.javaTypeString> <p.Identifier><if(p.defaultValueAssignment)> = <defaultValue(p)><endif>;
>>

getterStub(p) ::= <<
public <p.type.javaTypeString> get<p.Identifier.text; format="cap">();
>>

setterStub(p, c) ::= <<
public <c.javaClassName> set<p.Identifier.text; format="cap">(<p.type.javaTypeString> <p.Identifier>);
>>

constructor(c, classNamePrefix, classNameSuffix) ::= <<
<if(c.allRequiredProperties)>
/**
 * @deprecated Only for Jackson deserialization. Use the other constructor instead.
 */
@Deprecated
public <classNamePrefix><c.Identifier.text; format="cap"><classNameSuffix>() {
	// default constructor for Jackson
}
<endif>

public <classNamePrefix><c.Identifier.text; format="cap"><classNameSuffix>(<c.allRequiredProperties:parameter(); separator=", ">) {
	<if(c.superClassDecl)>super(<c.superClass.allRequiredProperties:{p|<p.Identifier>}; separator=", ">);<endif>
	<c.requiredPropertiesNotImplementedBySuperClasses:propertyAssignment(); separator="\n">
}
>>

toString(c) ::= <<
@SuppressWarnings("unchecked")
public String toString() {
	return new StringBuilder(getClass().getSimpleName()).append(": ")
			<c.simplePropertiesByRelevance:propertyToString(); separator=".append(\", \")\n">
			.toString();
}
>>

propertyToString(p) ::= <<
.append(<if(!p.type.isDtoClassOrInterface)>"<p.Identifier>=" + <p.Identifier><else><p.Identifier> != null ? "<p.Identifier>={" + <p.Identifier>.toString() + "}" : ""<endif>)
>>

jsonSetter(p) ::= <<
<! if (<if(p.type.isPrimitiveType)><p.Identifier> != <defaultValue(p)><else>!Objects.equals(<p.Identifier>, <defaultValue(p)>)<endif>) { !><\\>
<if(!p.type.isPrimitiveType)>if (<p.Identifier> != null) {<endif>
<if(!p.type.isPrimitiveType)>	<endif>obj.put("<p.Identifier>", <p.Identifier.text>);
<if(!p.type.isPrimitiveType)>}<endif>
<! } !>
>>

defaultValue(p) ::=  <<
  <if(p.defaultValueAssignment)><p.defaultValueAssignment.expression.fullText><else><p.type.defaultValue><endif>
>>

parameter(p) ::= "<p.type.javaTypeString> <p.Identifier>"

getter(propertyDeclaration) ::= <<
@com.fasterxml.jackson.annotation.JsonGetter("<propertyDeclaration.Identifier.text>")
public <propertyDeclaration.type.javaTypeString> get<propertyDeclaration.Identifier.text; format="cap">() {
	return <propertyDeclaration.Identifier>;
}
>>

setter(propertyDeclaration, clazzName) ::= <<
@com.fasterxml.jackson.annotation.JsonSetter("<propertyDeclaration.Identifier.text>")
public <clazzName; format="cap"> set<propertyDeclaration.Identifier.text; format="cap">(<propertyDeclaration.type.javaTypeString> <propertyDeclaration.Identifier>) {
	<propertyAssignment(propertyDeclaration)>
	return this;
}
>>

propertyAssignment(p) ::= "this.<p.Identifier> = <p.Identifier>;"

enumClass(e) ::= <<
<javaFilePrelude(e.packageName)>
public enum <e.javaClassName> {
	<e.enumConstant:enumConstant(e.hasStringValues); separator=",\n">;

	<if(e.hasStringValues)>
	private final String jsonValue;

	<e.javaClassName>(String jsonValue) {
		this.jsonValue = jsonValue;
	}

	@com.fasterxml.jackson.annotation.JsonValue
	public String jsonValue() {
		return jsonValue;
	}
	<else>
    @com.fasterxml.jackson.annotation.JsonValue
    public int jsonValue() {
        return ordinal();
    }
	<endif>
}>>


enumConstant(ec, hasStringValues) ::= <<
	<ec.Identifier><if(hasStringValues)>(<ec.StringLiteral>)<endif>
>>

eventClass(ed) ::= <<
public static class <ed.Identifier.text; format="cap">Event implements DtoEvent {

    public static final String TYPE_ID = "<ed.declaringClass.Identifier.text>.<ed.Identifier.text>";

	<ed.allProperties:fieldDeclaration(); separator="\n">

	<constructor(ed, "", "Event")>

	<toString(ed)>

	<ed.allProperties:getter(); separator="\n\n">

	<ed.allProperties:setter([ed.Identifier.text, "Event"]); separator="\n\n">

    <if(ed.staticModifier)>
    public String getComponentId() {
        return null;
    }
    public <ed.Identifier.text; format="cap">Event setComponentId(String ignored) {
        return this;
    }
    <endif>

}
>>

queryClass(qd) ::= <<
public static class <qd.Identifier.text; format="cap">Query implements DtoQuery {

    public static final String TYPE_ID = "<qd.declaringClass.Identifier.text>.<qd.Identifier.text>";

	<qd.allProperties:fieldDeclaration(); separator="\n">

	<constructor(qd, "", "Query")>

	<toString(qd)>

	<qd.allProperties:getter(); separator="\n\n">

	<qd.allProperties:setter([qd.Identifier.text, "Query"]); separator="\n\n">

}
>>


commandClass(cmd) ::= <<
@JsonTypeName("<cmd.declaringClass.Identifier.text>.<cmd.Identifier.text>")
@JsonFormat(shape = JsonFormat.Shape.ARRAY)
@JsonPropertyOrder({<cmd.allProperties:{p|"<p.Identifier>"}; separator=", ">})
public static class <cmd.Identifier.text; format="cap">Command implements DtoCommand\<<if(cmd.type)><cmd.type.javaNonPrimitiveTypeString><else>Void<endif>\> {

	<cmd.allProperties:fieldDeclaration(); separator="\n">

	<constructor(cmd, "", "Command")>

	<toString(cmd)>

	<cmd.allProperties:getter(); separator="\n\n">

}
>>

jsonWrapper(c) ::= <<
<javaFilePrelude(c.packageName)>

public class <c.javaClassName>Wrapper extends <if(c.superClassDecl)>Dto<c.superClassDecl.typeName.text>Wrapper<else>DtoJsonWrapper<endif> {

    public static final String TYPE_ID = "<c.Identifier>";

    public <c.javaClassName>Wrapper(JsonNode jsonNode) {
        super(jsonNode);
    }

    <c.propertiesNotImplementedBySuperClasses:jsonWrapperGetter(); separator="\n\n">
}
>>

eventJsonWrapper(c) ::= <<
public static class <c.javaClassName>Wrapper extends DtoJsonWrapper {

    public static final String TYPE_ID = "<c.Identifier>";

    public <c.javaClassName>Wrapper(JsonNode jsonNode) {
        super(jsonNode);
    }

    <c.allProperties:jsonWrapperGetter(); separator="\n\n">
}
>>

jsonWrapperGetter(propertyDeclaration) ::= <<
<if(propertyDeclaration.type.isUiClientObjectReferenceOrCollectionOfThese)>
// skipped <propertyDeclaration.Identifier>
<else>
<uiObjectWrapperGetter(propertyDeclaration)>
<endif>
>>

uiObjectWrapperGetter(propertyDeclaration) ::= <<
public <propertyDeclaration.type.javaTypeWrapperString> get<propertyDeclaration.Identifier.text; format="cap">() {
    var node = jsonNode.get("<propertyDeclaration.Identifier>");
    <wrapperPropertyValueExtractor(propertyDeclaration.type, "node")>
}
>>

wrapperPropertyValueExtractor(type, variableName) ::= <<
if (<variableName> == null || <variableName>.isNull()) {
    return <type.defaultValue>;
}
<if (type.isList)>
ArrayNode <variableName>ArrayNode = ((ArrayNode) <variableName>);
return StreamSupport.stream(Spliterators.spliterator(<variableName>ArrayNode.elements(), <variableName>ArrayNode.size(), Spliterator.ORDERED), false)
    .map(<variableName>X -> {
        <wrapperPropertyValueExtractor(type.firstTypeArgument, [variableName,"X"])>
    })
    .collect(Collectors.toList());
<elseif (type.isDictionary)>
ObjectNode <variableName>ArrayNode = ((ObjectNode) <variableName>);
return StreamSupport.stream(Spliterators.spliterator(<variableName>ArrayNode.fields(), <variableName>ArrayNode.size(), Spliterator.ORDERED), false)
        .collect(Collectors.toMap(e -> e.getKey(), <variableName>Field -> {
            JsonNode <variableName>X = <variableName>Field.getValue();
            <wrapperPropertyValueExtractor(type.firstTypeArgument, [variableName,"X"])>
        }));
<elseif (type.isDtoClassOrInterface)>
if (!<variableName>.isObject()) {
    throw new IllegalArgumentException("<variableName> must be an object!");
}
return new <type.javaTypeWrapperString>(<variableName>);
<elseif (type.isEnum)>
if (<variableName>.isInt()) {
    return <type.javaTypeString>.values()[<variableName>.intValue()];
} else if (<variableName>.isTextual()) {
    return <type.javaTypeString>.valueOf(<variableName>.textValue());
} else {
    return null;
}
<elseif (type.isString)>
return <variableName>.textValue();
<elseif (type.isPrimitiveOrWrapperType)>
return <variableName>.as<type.primitiveTypeName; format="cap">();
<elseif (type.isObjectReference)>
return new DtoJsonWrapper(node);
<else>
if (!<variableName>.isObject()) {
    throw new IllegalArgumentException("<variableName> must be an object!");
}
return new <type.javaTypeWrapperString>(<variableName>);
<endif>
>>



