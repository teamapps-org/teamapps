/**
 * THIS IS GENERATED CODE!
 * PLEASE DO NOT MODIFY - ALL YOUR WORK WOULD BE LOST!
 */

import {ClientObject} from "projector-client-object-api";
import {S} from "./S";
import {ServerObjectChannel} from "projector-client-object-api";
import {SEventSource} from "./S";
interface EventEmitter<EO> { addListener(fn: (eventObject?: EO) => void, ...rest: any): {unsubscribe: () => void}; }

export interface A extends S {
	_type?: string;
}

export interface AServerObjectChannel extends ServerObjectChannel {

    sendEvent(eventName: "z", a: number, b: number): void;

    sendEvent(eventName: "s", s: string): void;

}
export interface StaticAServerObjectChannel extends ServerObjectChannel {

    sendEvent(eventName: "z2", a: number, b: number): void;

    sendEvent(eventName: "s2", i: number): void;

}

export interface AEventSource extends SEventSource {
	onZ: EventEmitter<A_ZEvent>;
}

export interface A_ZEvent {
	a: number;
	b: number
}

export interface A_Z2Event {
	a: number;
	b: number
}

