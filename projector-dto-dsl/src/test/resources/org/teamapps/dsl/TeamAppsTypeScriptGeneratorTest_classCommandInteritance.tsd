/**
 * THIS IS GENERATED CODE!
 * PLEASE DO NOT MODIFY - ALL YOUR WORK WOULD BE LOST!
 */

import {ClientObject} from "projector-client-object-api";
import {B} from "./B";
import {A} from "./A";
import {ServerObjectChannel} from "projector-client-object-api";
import {BCommandHandler} from "./B";
import {ACommandHandler} from "./A";
import {BEventSource} from "./B";
import {AEventSource} from "./A";
import {B_Z2Event} from "./B";
import {A_ZEvent} from "./A";
interface EventEmitter<EO> { addListener(fn: (eventObject?: EO) => void, ...rest: any): {unsubscribe: () => void}; }

export interface C extends B, A {
	_type?: string;
	c?: string
}

export interface CCommandHandler extends BCommandHandler, ACommandHandler {
	x3(y3: string): any;
}

export interface CServerObjectChannel extends ServerObjectChannel {

    sendEvent(eventName: "z3", eventObject: C_Z3Event): void;

    sendEvent(eventName: "z2", eventObject: B_Z2Event): void;

    sendEvent(eventName: "z", eventObject: A_ZEvent): void;


}

export interface CEventSource extends BEventSource, AEventSource {
	onZ3: EventEmitter<C_Z3Event>;
}

export interface C_Z3Event {
}
