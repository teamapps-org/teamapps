/**
 * THIS IS GENERATED CODE!
 * PLEASE DO NOT MODIFY - ALL YOUR WORK WOULD BE LOST!
 */

import {ClientObject} from "projector-client-object-api";
import {A} from "./A";
import {I} from "./I";
import {ServerObjectChannel} from "projector-client-object-api";
import {ACommandHandler} from "./A";
import {ICommandHandler} from "./I";
import {AEventSource} from "./A";
import {IEventSource} from "./I";
interface EventEmitter<EO> { addListener(fn: (eventObject?: EO) => void, ...rest: any): {unsubscribe: () => void}; }

export interface B extends A, I {
	_type?: string;
}

export interface BCommandHandler extends ACommandHandler, ICommandHandler {
}

export interface BServerObjectChannel extends ServerObjectChannel {

    sendEvent(eventName: "b", ): void;

    sendEvent(eventName: "j", ): void;

}

export interface BEventSource extends AEventSource, IEventSource {
}


