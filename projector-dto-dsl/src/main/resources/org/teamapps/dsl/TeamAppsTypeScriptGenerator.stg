/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
typeScriptFilePrelude() ::= <<
/**
 * THIS IS GENERATED CODE!
 * PLEASE DO NOT MODIFY - ALL YOUR WORK WOULD BE LOST!
 */
>>

classConfigDefinition(c) ::= <<
<typeScriptFilePrelude()>

<c.effectiveTypeScriptImports:{im|import {<im.name>\} from "<im.jsPackageName>";}; separator="\n">
<if(c.allEvents)>interface EventEmitter\<EO> { addListener(fn: (eventObject?: EO) => void, ...rest: any): {unsubscribe: () => void}; }<endif>

export interface <c.typeScriptIdentifier> <if(c.nonExternalSuperTypes)>extends <c.nonExternalSuperTypes:{c|<c.typeScriptIdentifier>};  separator=", "> <endif>{
	_type?: string;
	<c.properties:typeScriptPropertyDeclaration(false); separator=";\n">
	<c.queries:queryDeclaration(); separator=";\n">
}

<if(c.parserRuleContext.typescriptFactoryAnnotation)>
export function create<c.typeScriptIdentifier; format="cap">(<c.allRequiredProperties:parameter(false); separator=", "><if(c.allRequiredProperties && c.allNonRequiredProperties)>, <endif><if(c.allNonRequiredProperties)>nonRequiredProperties?: {<c.allNonRequiredProperties:parameter(true); separator=", ">}<endif>): <c.typeScriptIdentifier> {
	return {
		_type: "<c.name>"<if(c.allProperties)>,<endif>
		<c.allRequiredProperties:{p|<p.name>}; separator=", "><if(c.allRequiredProperties && c.allNonRequiredProperties)>,<endif>
		<if(c.allNonRequiredProperties)>...(nonRequiredProperties||{})<endif>
	};
}
<endif>

<if(c.allCommands)>
export interface <c.name>CommandHandler <if(c.superTypesWithCommands)>extends <c.superTypesWithCommands:{c|<c.name>CommandHandler}; separator=", "> <endif>{
	<c.nonStaticCommands:commandMethodStub(); separator="\n">
}
<endif>

<if(c.allEvents)>
export interface <c.name>EventSource <if(c.superTypesWithEvents)>extends <c.superTypesWithEvents:{c|<c.name>EventSource}; separator=", "> <endif>{
	<c.nonStaticEvents:teamAppsEventDeclaration(); separator="\n">
}
<endif>

<c.events:eventInterface(); separator="\n\n">

<c.queries:queryInterface(); separator="\n\n">
>>

commandMethodStub(cmd) ::= <<
<cmd.name>(<cmd.parameters:parameter(false); separator=", ">): <if(cmd.returnType)>Promise\<<cmd.returnType.typeScriptTypeName>\>|<cmd.returnType.typeScriptTypeName><else>any<endif>;
>>

teamAppsEventDeclaration(evt) ::= <<
on<evt.name; format="cap">: EventEmitter\<<evt.typeScriptInterfaceName>\>;
>>

eventInterface(evt) ::= <<
export interface <evt.typeScriptInterfaceName> {
	<evt.parameters:typeScriptPropertyDeclaration(true); separator=";\n">
}
>>

queryInterface(q) ::= <<
export interface <q.typeScriptInterfaceName> {
	<q.parameters:typeScriptPropertyDeclaration(true); separator=";\n">
}
>>

parameter(p, optional) ::= "<p.name><if(optional)>?<endif>: <p.type.typeScriptTypeName>"

interfaceConfigDefinition(c) ::= <<
<typeScriptFilePrelude()>

<c.effectiveTypeScriptImports:{im|import {<im.name>\} from "<im.jsPackageName>";}; separator="\n">
<if(c.allEvents)>interface EventEmitter\<EO> { addListener(fn: (eventObject?: EO) => void, ...rest: any): {unsubscribe: () => void}; }<endif>

export interface <c.typeScriptIdentifier> <if(c.nonExternalSuperTypes)>extends <c.nonExternalSuperTypes:{superInterface|<superInterface.typeScriptIdentifier>}; separator=", "> <endif>{
	_type?: string;
	<c.properties:typeScriptPropertyDeclaration(false); separator=";\n">
	<c.queries:queryDeclaration(); separator=";\n">
}

<if(c.allCommands)>
export interface <c.name>CommandHandler <if(c.superTypesWithCommands)>extends <c.superInterfacesWithCommands:{c|<c.name>CommandHandler}; separator=", "> <endif>{
	<c.nonStaticCommands:commandMethodStub(); separator="\n">
}
<endif>

<if(c.allEvents)>
export interface <c.name>EventSource <if(c.superTypesWithEvents)>extends <c.superInterfacesWithEvents:{c|<c.name>EventSource}; separator=", "> <endif>{
	<c.events:teamAppsEventDeclaration(); separator="\n">
}
<endif>

<c.events:eventInterface(); separator="\n\n">

<c.queries:queryInterface(); separator="\n\n">
>>

typeScriptPropertyDeclaration(p, forceRequired) ::= <<
<p.name><if(!p.required && !forceRequired)>?<endif>: <p.type.typeScriptTypeName>
>>

queryDeclaration(q) ::= <<
<q.name>: (query: <q.typeScriptInterfaceName>) => Promise\<<q.returnType.typeScriptTypeName>\>
>>

enum(e) ::= <<
<typeScriptFilePrelude()>
export enum <e.name> {
	<if(e.stringEnum)>
	<e.enumConstants:{ec|<ec.Identifier> = <ec.StringLiteral>}; separator=", ">
	<else>
	<e.enumConstants:{ec|<ec.Identifier>}; separator=", ">
	<endif>
}
>>

eventNamesObject(c, static) ::= <<
<if(static)>{ componentType: "<c.name>", eventDescriptors: [<c.allStaticEvents:{e|{name: "<e.name>", _type: "<e.jsonIdentifier>"\}}; separator=", ">] }<else>{ componentType: "<c.name>", eventDescriptors: [<c.allNonStaticEvents:{e|{name: "<e.name>", _type: "<e.jsonIdentifier>"\}}; separator=", ">] }<endif>
>>

indexTs(classes, interfaces, enums) ::= <<
<interfaces:{c|export * from "./<c.typeScriptIdentifier>";}; separator="\n">
<classes:{c|export * from "./<c.typeScriptIdentifier>";}; separator="\n">
<enums:{c|export * from "./<c.typeScriptIdentifier>";}; separator="\n">
>>