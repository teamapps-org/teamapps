/*-
 * ========================LICENSE_START=================================
 * TeamApps
 * ---
 * Copyright (C) 2014 - 2022 TeamApps.org
 * ---
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================LICENSE_END==================================
 */
typeScriptFilePrelude() ::= <<
/**
 * THIS IS GENERATED CODE!
 * PLEASE DO NOT MODIFY - ALL YOUR WORK WOULD BE LOST!
 */
>>

classConfigDefinition(c) ::= <<
<typeScriptFilePrelude()>

<c.effectiveTypeScriptImports:{im|import type {<im.name>\} from "<im.jsModuleName>";}; separator="\n">
<if(c.events)>interface EventEmitter\<EO> { addListener(fn: (eventObject?: EO) => void, ...rest: any): {unsubscribe: () => void}; }<endif>

export interface <c.typeScriptIdentifier> <if(c.nonExternalSuperTypes)>extends <c.nonExternalSuperTypes:{c|<c.typeScriptIdentifier>};  separator=", "> <endif>{
	_type?: string;
	<c.properties:typeScriptPropertyDeclaration(false); separator=";\n">
}

<if(c.allCommands)>
export interface <c.name>CommandHandler <if(c.superTypesWithCommands)>extends <c.superTypesWithCommands:{c|<c.name>CommandHandler}; separator=", "> <endif>{
	<c.nonStaticCommands:commandMethodStub(); separator="\n">
}
<endif>

<serverObjectChannelInterface(c)>
<if(c.hasStaticEventsOrQueries)><staticServerObjectChannelInterface(c)><endif>

<if(c.allEvents)>
export interface <c.name>EventSource <if(c.superTypesWithEvents)>extends <c.superTypesWithEvents:{c|<c.name>EventSource}; separator=", "> <endif>{
	<c.nonStaticEvents:projectorEventDeclaration(); separator="\n">
}
<endif>

<c.events:eventInterface(); separator="\n\n">

>>

commandMethodStub(cmd) ::= <<
<cmd.name>(<cmd.parameters:parameter(false); separator=", ">): <if(cmd.returnType)>Promise\<<cmd.returnType.typeScriptTypeName>\>|<cmd.returnType.typeScriptTypeName><else>any<endif>;
>>

projectorEventDeclaration(evt) ::= <<
on<evt.name; format="cap">: EventEmitter\<<evt.typeScriptInterfaceName>\>;
>>

eventInterface(evt) ::= <<
export interface <evt.typeScriptInterfaceName> {
	<evt.parameters:typeScriptPropertyDeclaration(true); separator=";\n">
}
>>

parameter(p, optional) ::= "<p.name><if(optional)>?<endif>: <p.type.typeScriptTypeName>"

interfaceConfigDefinition(c) ::= <<
<typeScriptFilePrelude()>

<c.effectiveTypeScriptImports:{im|import type {<im.name>\} from "<im.jsModuleName>";}; separator="\n">
<if(c.events)>interface EventEmitter\<EO> { addListener(fn: (eventObject?: EO) => void, ...rest: any): {unsubscribe: () => void}; }<endif>

export interface <c.typeScriptIdentifier> <if(c.nonExternalSuperTypes)>extends <c.nonExternalSuperTypes:{superInterface|<superInterface.typeScriptIdentifier>}; separator=", "> <endif>{
	_type?: string;
	<c.properties:typeScriptPropertyDeclaration(false); separator=";\n">
}

<if(c.allCommands)>
export interface <c.name>CommandHandler <if(c.superTypesWithCommands)>extends <c.superInterfacesWithCommands:{c|<c.name>CommandHandler}; separator=", "> <endif>{
	<c.nonStaticCommands:commandMethodStub(); separator="\n">
}
<endif>

<if(c.allEvents)>
export interface <c.name>EventSource <if(c.superTypesWithEvents)>extends <c.superInterfacesWithEvents:{c|<c.name>EventSource}; separator=", "> <endif>{
	<c.events:projectorEventDeclaration(); separator="\n">
}
<endif>

<if(c.hasEventsOrQueries)><serverObjectChannelInterface(c)><endif>
<if(c.hasStaticEventsOrQueries)><staticServerObjectChannelInterface(c)><endif>

<c.events:eventInterface(); separator="\n\n">

<c.queries:queryInterface(); separator="\n\n">
>>

typeScriptPropertyDeclaration(p, forceNonNullable) ::= <<
<p.name><if(!forceNonNullable && !p.nonNullable)>?<endif>: <p.type.typeScriptTypeName><if(!forceNonNullable && !p.nonNullable)> | null<endif>
>>

enum(e) ::= <<
<typeScriptFilePrelude()>
export const <e.namePlural> = Object.freeze({
    <if(e.stringEnum)>
    <e.enumConstants:{ec|<ec.Identifier>: <ec.StringLiteral>}; separator=",\n">
    <else>
    <e.enumConstants:{ec|<ec.Identifier>: <i>}; separator=",\n">
    <endif>
} as const);
export type <e.name> = typeof <e.namePlural>[keyof typeof <e.namePlural>]
>>

indexTs(classes, interfaces, enums) ::= <<
<interfaces:{c|export * from "./<c.typeScriptIdentifier>";}; separator="\n">
<classes:{c|export * from "./<c.typeScriptIdentifier>";}; separator="\n">
<enums:{c|export * from "./<c.typeScriptIdentifier>";}; separator="\n">
>>

serverObjectChannelInterface(c) ::= <<
export interface <c.name>ServerObjectChannel extends ServerObjectChannel {

    <c.allNonStaticEvents:serverObjectChannelEventMethodStub(); separator="\n\n">

    <c.allNonStaticQueries:serverObjectChannelQueryMethodStub(); separator="\n\n">

}
>>

staticServerObjectChannelInterface(c) ::= <<
export interface Static<c.name; format="cap">ServerObjectChannel extends ServerObjectChannel {

    <c.allStaticEvents:serverObjectChannelEventMethodStub(); separator="\n\n">

    <c.allStaticQueries:serverObjectChannelQueryMethodStub(); separator="\n\n">

}
>>

serverObjectChannelEventMethodStub(evt) ::= <<
sendEvent(eventName: "<evt.name>", eventObject: <evt.typeScriptInterfaceName>): void;
>>

serverObjectChannelQueryMethodStub(q) ::= <<
sendQuery(eventName: "<q.name>", <q.parameters:parameter(false); separator=", ">): Promise\<<q.returnType.typeScriptTypeName>\>;
>>